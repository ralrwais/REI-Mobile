'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _noImportant = require('aphrodite/no-important');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActivityIndicatorProps = {
  color: {
    red: 0,
    green: 0,
    blue: 0,
    alpha: 98 / 255
  },
  segments: 12,
  segmentWidth: 2,
  segmentLength: 3,
  spacing: 2,
  fadeTo: 31 / 98,
  fadeSteps: 6
};

// RGBA values measured by looking at the refresh control on top of white
// and black and solving a system of equations
var RefreshControlProps = {
  color: {
    red: Math.round(4845 / 56),
    green: Math.round(765 / 8),
    blue: Math.round(24225 / 224),
    alpha: 224 / 255
  },
  segments: 12,
  segmentWidth: 2,
  segmentLength: 5,
  spacing: 3,
  fadeTo: 0,
  fadeSteps: 11
};

var LoadingIndicator = function (_React$Component) {
  _inherits(LoadingIndicator, _React$Component);

  function LoadingIndicator() {
    _classCallCheck(this, LoadingIndicator);

    return _possibleConstructorReturn(this, (LoadingIndicator.__proto__ || Object.getPrototypeOf(LoadingIndicator)).apply(this, arguments));
  }

  _createClass(LoadingIndicator, [{
    key: 'render',
    value: function render() {
      var segmentCount = this.props.segments;
      var segmentWidth = this.props.segmentWidth;
      var segmentLength = this.props.segmentLength;
      var innerRadius = segmentWidth * 2 + this.props.spacing;

      var opacityDelta = (1 - this.props.fadeTo) / this.props.fadeSteps;

      var segments = [];
      for (var ii = 0; ii < segmentCount; ii++) {
        var opacity = 1 - Math.min(ii, this.props.fadeSteps) * opacityDelta;
        var rotation = -ii * 360 / segmentCount;
        segments.push(_react2.default.createElement('line', {
          key: ii,
          x1: '0',
          y1: innerRadius,
          x2: '0',
          y2: innerRadius + segmentLength,
          style: { opacity: opacity },
          transform: 'rotate(' + rotation + ')'
        }));
      }

      var _props$color = this.props.color;
      var red = _props$color.red;
      var green = _props$color.green;
      var blue = _props$color.blue;
      var alpha = _props$color.alpha;

      var rgbaColor = 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';

      var radius = innerRadius + segmentLength + Math.ceil(segmentWidth / 2);

      return _react2.default.createElement(
        'svg',
        {
          className: (0, _classnames2.default)((0, _noImportant.css)(styles.indicator), this.props.className),
          style: this.props.style,
          width: radius * 2,
          height: radius * 2,
          xmlns: 'http://www.w3.org/2000/svg' },
        _react2.default.createElement(
          'g',
          {
            stroke: rgbaColor,
            strokeWidth: segmentWidth,
            strokeLinecap: 'round',
            transform: 'translate(' + radius + ', ' + radius + ')' },
          segments
        )
      );
    }
  }]);

  return LoadingIndicator;
}(_react2.default.Component);

LoadingIndicator.ActivityIndicatorProps = ActivityIndicatorProps;
LoadingIndicator.RefreshControlProps = RefreshControlProps;
LoadingIndicator.defaultProps = ActivityIndicatorProps;
exports.default = LoadingIndicator;


var spinKeyframes = {
  from: {
    transform: 'rotate(0deg)'
  },
  to: {
    transform: 'rotate(360deg)'
  }
};

var styles = _noImportant.StyleSheet.create({
  indicator: {
    animationDuration: '1s',
    animationIterationCount: 'infinite',
    animationName: spinKeyframes,
    animationTimingFunction: 'steps(12)'
  }
});